/******************************************************************************
**
** <auto-generated>
**     This code was generated by a tool: UaModeler
**     Runtime Version: 1.6.2, using .NET Server 2.6.0 template (version 1)
**
**     This is a template file that was generated for your convenience.
**     This file will not be overwritten when generating code again.
**     ADD YOUR IMPLEMTATION HERE!
**
**     Generated by paukerflorian <pauker@ift.at>
** </auto-generated>
**
** Copyright (c) 2006-2019 Unified Automation GmbH All rights reserved.
**
** Software License Agreement ("SLA") Version 2.7
**
** Unless explicitly acquired and licensed from Licensor under another
** license, the contents of this file are subject to the Software License
** Agreement ("SLA") Version 2.7, or subsequent versions
** as allowed by the SLA, and You may not copy or use this file in either
** source code or executable form, except in compliance with the terms and
** conditions of the SLA.
**
** All software distributed under the SLA is provided strictly on an
** "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
** AND LICENSOR HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT
** LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
** PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the SLA for specific
** language governing rights and limitations under the SLA.
**
** Project: .NET OPC UA SDK information model for namespace http://auto.tuwien.ac.at/PackedBedRegenerator/
**
** Description: OPC Unified Architecture Software Development Kit.
**
** The complete license agreement can be found here:
** http://unifiedautomation.com/License/SLA/2.7/
**
** Created: 14.03.2019
**
******************************************************************************/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.IO;
using System.Reflection;
using UnifiedAutomation.UaBase;
using UnifiedAutomation.UaServer;
namespace ASG.ASG_NS
{
    internal partial class ASG_NSNodeManager : BaseNodeManager
    {
        #region Constructor
        /// <summary>
        /// Initializes a new instance of the class.
        /// </summary>
        public ASG_NSNodeManager(ServerManager server) : base(server)
        {
        }
        #endregion

        #region IDisposable
        /// <summary>
        /// An overrideable version of the Dispose.
        /// </summary>
        /// <param name="disposing"></param>
        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
                // TBD
            }
        }
        #endregion

        #region Overridden Methods
        /// <summary>
        /// Called when the node manager is started.
        /// </summary>
        public override void Startup()
        {
            try
            {
                Console.WriteLine("Starting ASG_NSNodeManager.");

                DefaultNamespaceIndex = AddNamespaceUri("http://auto.tuwien.ac.at/PackedBedRegenerator/");

                Console.WriteLine("Loading the ASG_NS Model.");
                ImportUaNodeset(Assembly.GetEntryAssembly(), "packedbedregenerator.xml");

                // Link model to nodes
                PackedBedRegeneratorModel myPackedBedRegeneratorModel = new PackedBedRegeneratorModel();
                LinkModelToNode(ObjectIds.PackedBedRegenerator.ToNodeId(Server.NamespaceUris), myPackedBedRegeneratorModel, null, null, 500);

                TemperatureSensorModel t1 = new TemperatureSensorModel();
                LinkModelToNode(ObjectIds.PackedBedRegenerator_BulkContainer_T_L1.ToNodeId(Server.NamespaceUris), t1, null, null, 500);

                TemperatureSensorModel t2 = new TemperatureSensorModel();
                LinkModelToNode(ObjectIds.PackedBedRegenerator_BulkContainer_T_L2.ToNodeId(Server.NamespaceUris), t2, null, null, 500);

                TemperatureSensorModel t3 = new TemperatureSensorModel();
                LinkModelToNode(ObjectIds.PackedBedRegenerator_BulkContainer_T_L3.ToNodeId(Server.NamespaceUris), t3, null, null, 500);

                TemperatureSensorModel t4 = new TemperatureSensorModel();
                LinkModelToNode(ObjectIds.PackedBedRegenerator_BulkContainer_T_L4.ToNodeId(Server.NamespaceUris), t4, null, null, 500);
                
                // Set the values
                myPackedBedRegeneratorModel.Heater.Setpoint = 77.0;
                t1.CurrentTemperature.Value = 180;
                t1.CurrentTemperature.EngineeringUnits = EngineeringUnits.Degree_Celsius;
                t2.CurrentTemperature.Value = 190;
                t2.CurrentTemperature.EngineeringUnits = EngineeringUnits.Degree_Celsius;
                t3.CurrentTemperature.Value = 200;
                t3.CurrentTemperature.EngineeringUnits = EngineeringUnits.Degree_Celsius;
                t4.CurrentTemperature.Value = 210;
                t4.CurrentTemperature.EngineeringUnits = EngineeringUnits.Degree_Celsius;

            }
            catch (Exception e)
            {
                Console.WriteLine("Failed to start ASG_NSNodeManager " + e.Message);
            }
        }

        /// <summary>
        /// Called when the node manager is stopped.
        /// </summary>
        public override void Shutdown()
        {
            try
            {
                Console.WriteLine("Stopping ASG_NSNodeManager.");

                // TBD
            }
            catch (Exception e)
            {
                Console.WriteLine("Failed to stop ASG_NSNodeManager " + e.Message);
            }
        }
        #endregion


        class MyHistoryDataEnumerator : IHistoryDataEnumerator
        {
            Dictionary<DateTime, double> keyValuePairs = new Dictionary<DateTime, double>();
            int keyValuePairsPosition = 0;

            public void init()
            {
                if(keyValuePairs.Count == 0)
                {
                    keyValuePairs.Add(new DateTime(2019, 3, 21, 16, 52, 10), 5.1);
                    keyValuePairs.Add(new DateTime(2019, 3, 21, 16, 53, 20), 8.2);
                    keyValuePairs.Add(new DateTime(2019, 3, 21, 16, 54, 30), 4.3);
                    keyValuePairs.Add(new DateTime(2019, 3, 21, 16, 55, 40), 3.4);
                    keyValuePairs.Add(new DateTime(2019, 3, 21, 16, 56, 50), 2.5);
                    keyValuePairs.Add(new DateTime(2019, 3, 21, 16, 57, 00), 5.6);
                }
            }

            public ModificationInfo GetModificationInfo()
            {
                throw new NotImplementedException();
            }

            public DataValue GetValue()
            {
                DataValue dv = new DataValue();
                dv.Value = keyValuePairs.Values.ElementAt(keyValuePairsPosition);
                dv.SourceTimestamp = keyValuePairs.Keys.ElementAt(keyValuePairsPosition);
                dv.ServerTimestamp = keyValuePairs.Keys.ElementAt(keyValuePairsPosition);
                dv.StatusCode.IsGood();
                return dv;
            }

            public bool MoveBack()
            {
                if (keyValuePairsPosition > 0)
                {
                    keyValuePairsPosition--;
                    return true;
                }
                else
                    return false;
            }

            public bool MoveNext()
            {
                if (keyValuePairsPosition < keyValuePairs.Count-1)
                {
                    keyValuePairsPosition++;
                    return true;
                }
                else
                    return false;
            }

            public void Reset(DateTime timestamp)
            {
                keyValuePairsPosition = 0;
            }
        }

        // TFR
        class MyHistoryDataSource : IHistoryDataSource
        {
            public IHistoryDataEnumerator GetEnumerator(RequestContext context, DateTime timestamp)
            {
                MyHistoryDataEnumerator historyDataEnumerator = new MyHistoryDataEnumerator();
                historyDataEnumerator.init();
                return historyDataEnumerator;
            }
        }

        // TFR
        protected override HistoryDataReadRawContinuationPoint CreateHistoryContinuationPoint(
            RequestContext context,
            ReadRawModifiedDetails details,
            HistoryDataHandle nodeHandle,
            string indexRange,
            QualifiedName dataEncoding)
        {
            IHistoryDataSource myHistoryDataSource = new MyHistoryDataSource();
            HistoryDataRawReader reader = new HistoryDataRawReader();
            reader.Initialize(context, myHistoryDataSource, details);
            HistoryDataReadRawContinuationPoint cp = new HistoryDataReadRawContinuationPoint()
            {
                Reader = reader,
                NumValuesPerNode = details.NumValuesPerNode,
                ApplyIndexRangeAndEncoding = !String.IsNullOrEmpty(indexRange) || !QualifiedName.IsNull(dataEncoding),
                IndexRange = indexRange,
                DataEncoding = dataEncoding
            };

            return cp;
        }
        #region Private Methods
        #endregion

        #region Private Fields
        #endregion
    }
}

