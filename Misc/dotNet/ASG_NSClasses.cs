/******************************************************************************
**
** <auto-generated>
**     This code was generated by a tool: UaModeler
**     Runtime Version: 1.6.2, using .NET Server 2.6.0 template (version 1)
**
**     Changes to this file may cause incorrect behavior and will be lost if
**     the code is regenerated.
**
**     Generated by paukerflorian <pauker@ift.at>
** </auto-generated>
**
** Copyright (c) 2006-2019 Unified Automation GmbH All rights reserved.
**
** Software License Agreement ("SLA") Version 2.7
**
** Unless explicitly acquired and licensed from Licensor under another
** license, the contents of this file are subject to the Software License
** Agreement ("SLA") Version 2.7, or subsequent versions
** as allowed by the SLA, and You may not copy or use this file in either
** source code or executable form, except in compliance with the terms and
** conditions of the SLA.
**
** All software distributed under the SLA is provided strictly on an
** "AS IS" basis, WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
** AND LICENSOR HEREBY DISCLAIMS ALL SUCH WARRANTIES, INCLUDING WITHOUT
** LIMITATION, ANY WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
** PURPOSE, QUIET ENJOYMENT, OR NON-INFRINGEMENT. See the SLA for specific
** language governing rights and limitations under the SLA.
**
** Project: .NET OPC UA SDK information model for namespace http://auto.tuwien.ac.at/PackedBedRegenerator/
**
** Description: OPC Unified Architecture Software Development Kit.
**
** The complete license agreement can be found here:
** http://unifiedautomation.com/License/SLA/2.7/
**
** Created: 21.03.2019
**
******************************************************************************/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Xml;
using UnifiedAutomation.UaBase;
using UnifiedAutomation.UaServer;

namespace ASG.ASG_NS
{
    #region BaseSensorModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.BaseSensorType, NamespaceUri=ASG.ASG_NS.Namespaces.ASG_NS)]
    public partial class BaseSensorModel : BaseObjectModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="BaseSensorModel" /> class.
        /// </summary>
        public BaseSensorModel() : this((BaseSensorModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BaseSensorModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public BaseSensorModel(BaseSensorModel template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                SerialNumber = template.SerialNumber == null ? null : template.SerialNumber.Clone() as string;
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the SerialNumber
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.ASG_NS)]
        public string SerialNumber { get; set; }


        #endregion
    }
    #endregion


    #region MassFlowSensorModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.MassFlowSensorType, NamespaceUri=ASG.ASG_NS.Namespaces.ASG_NS)]
    public partial class MassFlowSensorModel : BaseSensorModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="MassFlowSensorModel" /> class.
        /// </summary>
        public MassFlowSensorModel() : this((MassFlowSensorModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MassFlowSensorModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public MassFlowSensorModel(MassFlowSensorModel template) : base(template)
        {
            if (template == null)
            {
                CurrentMassFlow = new AnalogItemModel<double>();
            }
            else
            {
                CurrentMassFlow = new AnalogItemModel<double>(template.CurrentMassFlow);
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the CurrentMassFlow
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.ASG_NS)]
        public AnalogItemModel<double> CurrentMassFlow { get; set; }


        #endregion
    }
    #endregion


    #region TemperatureSensorModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.TemperatureSensorType, NamespaceUri=ASG.ASG_NS.Namespaces.ASG_NS)]
    public partial class TemperatureSensorModel : BaseSensorModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="TemperatureSensorModel" /> class.
        /// </summary>
        public TemperatureSensorModel() : this((TemperatureSensorModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="TemperatureSensorModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public TemperatureSensorModel(TemperatureSensorModel template) : base(template)
        {
            if (template == null)
            {
                CurrentTemperature = new AnalogItemModel<double>();
            }
            else
            {
                CurrentTemperature = new AnalogItemModel<double>(template.CurrentTemperature);
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the CurrentTemperature
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.ASG_NS)]
        public AnalogItemModel<double> CurrentTemperature { get; set; }


        #endregion
    }
    #endregion


    #region BulkContainerModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.BulkContainerType, NamespaceUri=ASG.ASG_NS.Namespaces.ASG_NS)]
    public partial class BulkContainerModel : BaseObjectModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="BulkContainerModel" /> class.
        /// </summary>
        public BulkContainerModel() : this((BulkContainerModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BulkContainerModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public BulkContainerModel(BulkContainerModel template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
            }
        }
        #endregion

        #region Public Properties

        #endregion
    }
    #endregion


    #region HeaterModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.HeaterType, NamespaceUri=ASG.ASG_NS.Namespaces.ASG_NS)]
    public partial class HeaterModel : BaseObjectModel, IMethodDispatcher
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="HeaterModel" /> class.
        /// </summary>
        public HeaterModel() : this((HeaterModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="HeaterModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public HeaterModel(HeaterModel template) : base(template)
        {
            if (template == null)
            {
                T_H = new TemperatureSensorModel();
            }
            else
            {
                Setpoint = template.Setpoint;
                T_H = new TemperatureSensorModel(template.T_H);
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the Setpoint
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.ASG_NS)]
        public double Setpoint { get; set; }

        /// <summary>
        /// Gets or sets the T_H
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.ASG_NS)]
        public TemperatureSensorModel T_H { get; set; }


        #endregion
        #region IMethodDispatcher Members
        /// <summary>
        /// Gets the method dispatcher.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="objectId">The object id.</param>
        /// <param name="methodId">The method id.</param>
        /// <returns></returns>
        public virtual CallMethodEventHandler GetMethodDispatcher(
            RequestContext context,
            NodeId objectId,
            NodeId methodId)
        {
            return DispatchMethod;
        }
        #endregion

        #region Public Methods

        /// <summary>
        /// Dispatches the method.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="methodHandle">The method handle.</param>
        /// <param name="inputArguments">The input arguments.</param>
        /// <param name="inputArgumentResults">The input argument results.</param>
        /// <param name="outputArguments">The output arguments.</param>
        /// <returns></returns>
        public virtual StatusCode DispatchMethod(
            RequestContext context,
            MethodHandle methodHandle,
            IList<Variant> inputArguments,
            List<StatusCode> inputArgumentResults,
            List<Variant> outputArguments)
        {
            IHeaterMethods implemention = HeaterMethods;

            if (implemention == null)
            {
                implemention = this as IHeaterMethods;
            }

            if (implemention == null)
            {
                return StatusCodes.BadUserAccessDenied;
            }
            if (methodHandle.MethodDeclarationId.Equals(new ExpandedNodeId(ASG.ASG_NS.Methods.HeaterType_SetSetpoint, ASG.ASG_NS.Namespaces.ASG_NS).ToNodeId(context.NamespaceUris)))
            {
                StatusCode ret = implemention.SetSetpoint(context, this, inputArguments[0].ToDouble());
                if (ret.IsGood())
                {
                }
                return ret;

            }
            return StatusCodes.BadMethodInvalid;
        }

        /// <summary>
        /// Gets or sets the Heater methods.
        /// </summary>
        /// <value>
        /// The Heater methods.
        /// </value>
        public IHeaterMethods HeaterMethods { get; set; }
        #endregion
    }

    /// <summary>
    /// The interface for methods implemented on the HeaterModel object.
    /// </summary>
    public interface IHeaterMethods
    {
        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="setpoint"></param>
        /// <returns></returns>
        StatusCode SetSetpoint(
            RequestContext context,
            HeaterModel model,
            double setpoint
            );

    }

    #endregion


    #region PackedBedRegeneratorModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.PackedBedRegeneratorType, NamespaceUri=ASG.ASG_NS.Namespaces.ASG_NS)]
    public partial class PackedBedRegeneratorModel : BaseObjectModel
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="PackedBedRegeneratorModel" /> class.
        /// </summary>
        public PackedBedRegeneratorModel() : this((PackedBedRegeneratorModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="PackedBedRegeneratorModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public PackedBedRegeneratorModel(PackedBedRegeneratorModel template) : base(template)
        {
            if (template == null)
            {
                BulkContainer = new BulkContainerModel();
                Heater = new HeaterModel();
                Ventilator = new VentilatorModel();
            }
            else
            {
                BulkContainer = new BulkContainerModel(template.BulkContainer);
                Heater = new HeaterModel(template.Heater);
                Ventilator = new VentilatorModel(template.Ventilator);
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the BulkContainer
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.ASG_NS)]
        public BulkContainerModel BulkContainer { get; set; }

        /// <summary>
        /// Gets or sets the Heater
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.ASG_NS)]
        public HeaterModel Heater { get; set; }

        /// <summary>
        /// Gets or sets the Ventilator
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.ASG_NS)]
        public VentilatorModel Ventilator { get; set; }


        #endregion
    }
    #endregion


    #region VentilatorModel
    /// <summary>
    /// </summary>
    [UaTypeDefinition(NodeId=ObjectTypes.VentilatorType, NamespaceUri=ASG.ASG_NS.Namespaces.ASG_NS)]
    public partial class VentilatorModel : BaseObjectModel, IMethodDispatcher
    {
        #region Constructors
        /// <summary>
        /// Initializes a new instance of the <see cref="VentilatorModel" /> class.
        /// </summary>
        public VentilatorModel() : this((VentilatorModel)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="VentilatorModel" /> class.
        /// </summary>
        /// <param name="template">The template.</param>
        public VentilatorModel(VentilatorModel template) : base(template)
        {
            if (template == null)
            {
            }
            else
            {
                if (template.MassFlowSensor != null)
                {
                    MassFlowSensor = new MassFlowSensorModel(template.MassFlowSensor);
                }
                Setpoint = template.Setpoint;
            }
        }
        #endregion

        #region Public Properties
        /// <summary>
        /// Gets or sets the MassFlowSensor
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.ASG_NS)]
        public MassFlowSensorModel MassFlowSensor { get; set; }

        /// <summary>
        /// Gets or sets the Setpoint
        /// </summary>
        [UaInstanceDeclaration(NamespaceUri = Namespaces.ASG_NS)]
        public double Setpoint { get; set; }


        #endregion
        #region IMethodDispatcher Members
        /// <summary>
        /// Gets the method dispatcher.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="objectId">The object id.</param>
        /// <param name="methodId">The method id.</param>
        /// <returns></returns>
        public virtual CallMethodEventHandler GetMethodDispatcher(
            RequestContext context,
            NodeId objectId,
            NodeId methodId)
        {
            return DispatchMethod;
        }
        #endregion

        #region Public Methods

        /// <summary>
        /// Dispatches the method.
        /// </summary>
        /// <param name="context">The context.</param>
        /// <param name="methodHandle">The method handle.</param>
        /// <param name="inputArguments">The input arguments.</param>
        /// <param name="inputArgumentResults">The input argument results.</param>
        /// <param name="outputArguments">The output arguments.</param>
        /// <returns></returns>
        public virtual StatusCode DispatchMethod(
            RequestContext context,
            MethodHandle methodHandle,
            IList<Variant> inputArguments,
            List<StatusCode> inputArgumentResults,
            List<Variant> outputArguments)
        {
            IVentilatorMethods implemention = VentilatorMethods;

            if (implemention == null)
            {
                implemention = this as IVentilatorMethods;
            }

            if (implemention == null)
            {
                return StatusCodes.BadUserAccessDenied;
            }
            if (methodHandle.MethodDeclarationId.Equals(new ExpandedNodeId(ASG.ASG_NS.Methods.VentilatorType_SetSetpoint, ASG.ASG_NS.Namespaces.ASG_NS).ToNodeId(context.NamespaceUris)))
            {
                StatusCode ret = implemention.SetSetpoint(context, this, inputArguments[0].ToDouble());
                if (ret.IsGood())
                {
                }
                return ret;

            }
            return StatusCodes.BadMethodInvalid;
        }

        /// <summary>
        /// Gets or sets the Ventilator methods.
        /// </summary>
        /// <value>
        /// The Ventilator methods.
        /// </value>
        public IVentilatorMethods VentilatorMethods { get; set; }
        #endregion
    }

    /// <summary>
    /// The interface for methods implemented on the VentilatorModel object.
    /// </summary>
    public interface IVentilatorMethods
    {
        /// <summary>
        /// </summary>
        /// <param name="context"></param>
        /// <param name="model"></param>
        /// <param name="speed"></param>
        /// <returns></returns>
        StatusCode SetSetpoint(
            RequestContext context,
            VentilatorModel model,
            double speed
            );

    }

    #endregion



}
